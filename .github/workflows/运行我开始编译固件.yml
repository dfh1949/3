name: CI  # 定义工作流名称

on:
  push:  # 在push事件时触发
  pull_request:  # 在拉取请求时触发
  workflow_dispatch:  # 支持手动触发
    inputs:
      debug_enabled:  # 用于调试模式启用
        description: '启用tmate调试（https://github.com/marketplace/actions/debugging-with-tmate）' 
        required: false
        default: 'no'
  release:
    types: [published]  # 在发布新版本时触发

jobs:
  build:
    name: 编译任务  # 任务名称
    runs-on: ubuntu-latest  # 使用的操作系统环境
    if: ${{ !(github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) }}  # 排除标签推送的情况
    env:
      build_variant: ${{ matrix.build_variant }}  # 构建变体（如mt7620）
      targets: ${{ matrix.targets }}  # 目标设备（如RT-N11P）
      images_dir: /opt/images  # 固件存放目录

    strategy:
      matrix:
        include:
          - build_variant: "mt7620"  # 支持的芯片类型
            targets: "RT-N11P"  # 支持的设备类型

    steps:
      - name: 检出源码
        uses: actions/checkout@v2  # 使用GitHub官方的检出动作

      - name: 准备环境
        run: |
          sudo apt update -qq  # 更新APT索引
          sudo apt install -y libtool-bin gperf python3-docutils autopoint gettext  # 安装依赖

      - name: 运行shellcheck检查
        run: sh ./trunk/tools/shellcheck.sh  # 检查shell脚本的语法

      - name: 准备工具链
        run: |
          cd toolchain-mipsel
          sh dl_toolchain.sh  # 下载工具链

      - name: 设置tmate调试会话
        uses: mxschmitt/action-tmate@v3  # 启动tmate调试会话
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled == 'yes' }}  # 仅在手动触发且调试模式启用时运行
        with:
          limit-access-to-actor: true  # 限制仅当前用户访问

      - name: 启动编译
        run: |
          cd trunk
          mkdir -p ${images_dir}  # 创建存放固件的目录
          for m in $targets; do 
            fakeroot ./build_firmware_ci $m  # 使用fakeroot构建固件
            if [ $? = 0 ]; then 
              cp -f images/*.trx ${images_dir}/$m.trx  # 编译成功则复制到输出目录
            else
              exit 1  # 编译失败则退出
            fi
            ./clear_tree_simple >/dev/null 2>&1  # 清理构建目录
          done

      - name: 创建归档文件
        if: ${{ github.event_name != 'release' && success() }}  # 只有在非发布事件且构建成功时执行
        run: |
          ls -lh ${images_dir}  # 查看生成的固件文件
          GIT_VERSION=`git rev-parse --short=7 HEAD 2>/dev/null` && [ -n "$GIT_VERSION" ] && \
            image_name=images_${build_variant}_${GIT_VERSION} || image_name=images_${build_variant}
          cd ${images_dir}
          md5sum *.trx | tee md5sum.txt  # 计算md5并保存
          7z a -mx=9 ${image_name}.7z ./*  # 使用7z压缩固件
          echo "image_name=${image_name}" >> $GITHUB_ENV  # 设置环境变量

      - name: 上传固件到Artifact
        if: ${{ github.event_name != 'release' && success() }}  # 只有在非发布事件且构建成功时执行
        uses: actions/upload-artifact@v2.2.1  # 上传构建产物
        with:
          name: ${{ env.image_name }}  # 使用生成的固件名称作为文件名
          path: ${{ env.images_dir }}/*.7z  # 上传7z归档文件

      - name: 上传固件到Release
        if: ${{ github.event_name == 'release' && success() }}  # 仅在发布事件且构建成功时执行
        uses: svenstaro/upload-release-action@2.2.0  # 上传到GitHub Releases
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}  # 使用GitHub令牌
          file: ${{ env.images_dir }}/*.trx  # 上传固件文件
          tag: ${{ github.ref }}  # 使用当前的Git标签
          overwrite: true  # 如果文件已存在则覆盖
          file_glob: true  # 支持文件名通配符

